{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "introduction",
  "steps": [
    {
      "file": "README.md",
      "description": "Welcome to the tour for this mEditor to EDPUB adapter. Advance to the next tour step when you're finished with this file.",
      "line": 1
    },
    {
      "file": "src/index.ts",
      "description": "The server registers the `nats` and `healthCheck` plugins here, then starts listening for incoming requests. Note the arguments that we're passing in to the `nats` plugin. We'll explore that plugin in the next step.",
      "line": 13
    },
    {
      "file": "src/nats/stan-fastify-plugin.ts",
      "description": "These options are the parameters received from the previous step's call to register the `nats` plugin. ",
      "line": 17
    },
    {
      "file": "src/nats/stan-fastify-plugin.ts",
      "description": "`client` and `subscriptions` are received back from the call to initialize NATS.",
      "line": 18
    },
    {
      "file": "src/nats/stan-fastify-plugin.ts",
      "description": "The server instance is [decorated with](https://www.fastify.io/docs/latest/Reference/Decorators/) the registered [NATS client](https://github.com/nats-io/stan.js) and the active subscriptions. Most of these decorated properties have simply been passed through with the `.regiser()` call. `auth`, for example, is decorated onto the server instance so that calls from this adapter to a backend service can share a common token and expiry—at this point in the application's life, both of those values would be `null`.",
      "line": 86
    },
    {
      "file": "src/nats/stan-fastify-plugin.ts",
      "description": "Connects to a running STAN ([NATS Streaming](https://docs.nats.io/legacy/stan/intro)) instance.",
      "line": 27
    },
    {
      "file": "src/nats/stan-fastify-plugin.ts",
      "description": "Add connection handlers (which were passed in as arguments). Each event name is [defined by STAN](https://github.com/nats-io/stan.js#events); this registration expects the method name of the handler to share the event name. We'll explore that briefly in the next step.",
      "line": 43
    },
    {
      "file": "src/nats/connection-handlers.ts",
      "description": "Factory function that returns methods whose names match the events [listed in the STAN documentation](https://github.com/nats-io/stan.js#events). This convention allows for easy registering of event handler to event names, as seen in the previous step.",
      "line": 5
    },
    {
      "file": "src/nats/stan-fastify-plugin.ts",
      "description": "`init()` returns a promise, which returns a listener for STAN's `connect` event, resolving or rejecting as needed.",
      "line": 48
    },
    {
      "file": "src/nats/stan-fastify-plugin.ts",
      "description": "`subscriptions` (previously discussed as being decorated on the server) are the result of a call to subscribe.",
      "line": 53
    },
    {
      "file": "src/nats/stan-fastify-plugin.ts",
      "description": "`subscribe` maps over the subjects passed in as arguments to this plugin. Subjects are discussed in the next step.",
      "line": 62
    },
    {
      "file": "src/index.ts",
      "description": "Subjects will become [channels](https://docs.nats.io/legacy/stan/intro/channels) to which this application will subcribe. ",
      "line": 22
    },
    {
      "file": "src/meditor/types.ts",
      "description": "This enum defines what subjects are avialable to this application. mEditor may have many subscribers for many different channels. OverviewPages is the (initial guess at a) subject name for EDPUB's overview pages. Note that the Acknowledge subject is shared across many different subscribers, and is resposible for notifying mEditor of status updates. E.g., an overview page has been published: here is the URL at whidh this page can be viewed. Since the Acknowledge subject is shared across many different applications, mEditor tracks which subscriber has acknowledged a change (whether success or failure) through the data passed in the acknowledgement message (shown in the next step).",
      "line": 48
    },
    {
      "file": "src/meditor/types.ts",
      "description": "The `id` in this inteface is a reference to a unique document stored in a database. mEditor will preserve a single document state per target. E.g., Let's say that these overview pages need to have multiple subscribers—OverviewPages and ColdStorage. This acknowledgement target will allow mEditor to report a document state per subscriber. In this example, mEditor would need to report that an overview page was sucessfully published and (in a separate subscriber) successfully archived into cold storage. ",
      "line": 13
    },
    {
      "file": "src/nats/stan-fastify-plugin.ts",
      "description": "`subscriptionHandlers` follow the same naming convention as `connectionHandlers`. We'll next cover the flow of a message through the application, now that the application is subscribed to all channels that have been passed in to this NATS plugin.",
      "line": 77
    },
    {
      "file": "src/nats/subscription-handlers.ts",
      "description": "The `message` method event handler is called (because we previously registered these subscription handlers) when this application receives a message to which it is subscribed. We get the subject of the message, awaiting a sucessful resolution of a call to `handleMessageSubject` before acknowledging to the NATS publisher (note that this is separate from ackowledging to mEdtor; see the [documentation on durable subscriptions](https://github.com/nats-io/stan.js#durable-subscriptions)). \n\nIf the call throws, we attempt to discern if it was an error received from another server (like EDPUB's API) or this application (e.g., `JSON.parse()` of a message internally threw an error), handling it differently for each. We'll explore `handleMessageBySubject` next.",
      "line": 34
    },
    {
      "file": "src/overview-pages/controllers.ts",
      "description": "We first determine the appropriate API actions to take for this subject.",
      "line": 30
    },
    {
      "file": "src/overview-pages/api-config.ts",
      "description": "This function will need to be updated to return API actions meaningful to EDPUB's API. The concept is very open to configuration, and the function's signature is described through its typings (which will also need to be updated as the function changes). Whatever needs to be accomplished on EDPUB's API, this is the concept in plain language: take in a document state and return what should happen to that document. We'll see an example of what that might look like by continuing to follow the flow of a message through this application.",
      "line": 36
    },
    {
      "file": "src/overview-pages/controllers.ts",
      "description": "With only one subject preconfigured, this handler will be called for any of the Overview Pages messages that this application receives. Note the `apiAction` argument. We're calling the `handleOverviewPages` controller per API action that is returned from `determineApiActions`.",
      "line": 56
    },
    {
      "file": "src/overview-pages/controllers.ts",
      "description": "Reading from the apiAction paremeter, this function calls services based on the method defined in the API config. Note that it awaits the service calls. A successful response gets returned as an acknowledgement.",
      "line": 93
    },
    {
      "file": "src/overview-pages/controllers.ts",
      "description": "Once each API action has been completed (`Promse.allSettled()`, above), `acknowledgeToMeditor` is called per acknowledgement. That acknowledgement to mEditor is an asynchronously-published NATS message that mEditor uses to update the document's state per target (as previously described).\n\nBefore we explore some of the example services in detail, we'll look at `handleAuthentication`, called above.",
      "line": 72
    },
    {
      "file": "src/overview-pages/controllers.ts",
      "description": "`handleAuthentication` is called before processing the API actions returned above.",
      "line": 41
    },
    {
      "file": "src/overview-pages/services.ts",
      "description": "Reads the current expiry on the server instance (we briefly covered this when discussing decorated properties in the `nats` plugin) and conditionally calls `authorize` if the expiry is within ten minutes of now.",
      "line": 30
    },
    {
      "file": "src/overview-pages/services.ts",
      "description": "`authorize` will need to be customized to fetch and process whatever authentication is required to call the EDPUB API. `response`, below, is an example response that this application might receive from a bearer-tokaen based authentication endpoint. Below that is example logic for processing the next expiry time.\n\nWe'll now transition to discussing a few of the example Overview Pages services below—these would be called from the context of `handleOverviewPages`.",
      "line": 45
    },
    {
      "file": "src/overview-pages/services.ts",
      "description": "Example function to put an entry into EDPUB's API. Notice the function parameters include the original mEditor NATS message, the API action, and the current authorization token. `parseDocumentTitle` is called, returning what the mEditor model defines as the title property. Below that, `response` holds an example response from EDPUB's API after a document has been `PUT`. Notice that we return a `url` in the response from the API. The URL will be returned with the mEditor acknowledgement. We'll jump to that now.",
      "line": 70
    },
    {
      "file": "src/meditor/services.ts",
      "description": "`convertMessageToAcknowledgement` cobbles together information from various sources and returns a mEditor acknowledgement. Notice that if `url` is included as a paremeter with truthy value, it's returned with the acknowledgement (and subsequently displayed in mEditor's UI).",
      "line": 31
    },
    {
      "file": "src/overview-pages/services.ts",
      "description": "Similarly, the `deleteEntry` function returns an example response from the EDPUB API, but since the document was deleted there is no URL. This function, like `putEntry`, expects an error to have a certain interface. This will probably need to be customized. If there is a non-200 response, both functions throw a subclassed error message. Since the calling function uses `Promise.allSettled()` and since `throw` rejects a promise, these errors would be sent to mEditor as an acknowledgement.",
      "line": 107
    },
    {
      "file": "src/overview-pages/adapters.ts",
      "description": "For the final step of this code tour, we'll briefly look at adapters. This example adapter would be a place to transform data going to or coming from EDPUB's API. This particular example adapter introduces [immer](https://immerjs.github.io/immer/) to prevent unintended side effects.",
      "line": 4
    }
  ]
}